// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    // DMux4Way(in=in, sel=sel[0..1], a=aMux, b=bMux, c=cMux, d=dMux);
    // Not(in=sel[2], out=notSel);
    // And(a=notSel, b=aMux, out=a);
    // And(a=notSel, b=bMux, out=b);
    // And(a=notSel, b=cMux, out=c);
    // And(a=notSel, b=dMux, out=d);
    // DMux4Way(in=in, sel=sel[0..1], a=eMux, b=fMux, c=gMux, d=hMux);
    // And(a=sel[2], b=eMux, out=e);
    // And(a=sel[2], b=fMux, out=f);
    // And(a=sel[2], b=gMux, out=g);
    // And(a=sel[2], b=hMux, out=h);
    DMux4Way(in=in, sel=sel[0..1], a=aOrEOut, b=bOrFOut, c=cMOrGOut, d=dMOrHOut);
    DMux(in=aOrEOut, sel=sel[2], a=a, b=e);
    DMux(in=bOrFOut, sel=sel[2], a=b, b=f);
    DMux(in=cMOrGOut, sel=sel[2], a=c, b=g);
    DMux(in=dMOrHOut, sel=sel[2], a=d, b=h);
}