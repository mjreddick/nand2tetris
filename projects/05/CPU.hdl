// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    
    
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=aRegIn);

    // Load A if it is an A instruction (a=0) or if the destination is A (d1=1)
    Not(in=instruction[15], out=isAInst);
    Or(a=isAInst, b=instruction[5], out=AInstOrDest);
    ARegister(in=aRegIn, load=AInstOrDest, out=aRegOut, out[0..14]=addressM); // A register

    // The a bit (index 12) should control if using M or A
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=inMMuxA);

    // load D when d2 (instruction[4]) and it is a C instruction (instruction[15]=1)
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=ALUOut, load=loadD, out=dRegOut); // D register
    
    ALU(x=dRegOut, y=inMMuxA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, out=outM, zr=zr, ng=ng);

    // Write M if it is not an A instruction (instruction[15] = 1) and M is the destination (d3 = 1)
    And(a=instruction[15], b=instruction[3] , out=writeM);

    // PC should load from A when it is not an A instruction (instruction[15]=1) and any of the jump conditions are met:
    //   j1 (instruction[2]) and ALUOut < 0 (ng)
    //   j2 (instruction[1]) and ALUOut = 0 (zr)
    //   j3 (instruction[0]) and ALUOut > 0 (!ng && !zr which is !(ng || zr))

    // j1 condition:
    And(a=instruction[2], b=ng, out=j1);
    // j2 condition:
    And(a=instruction[1], b=zr, out=j2);
    // ALUOut > 0
    Or(a=ng, b=zr, out=ngOrZr);
    Not(in=ngOrZr, out=gt);
    // j3 condition:
    And(a=instruction[0], b=gt, out=j3);

    // instruction[15] && (j1 || j2 || j3)
    Or(a=j1, b=j2, out=j1OrJ2);
    Or(a=j3, b=j1OrJ2, out=orJs);
    And(a=instruction[15], b=orJs, out=jump);

    PC(in=aRegOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
}